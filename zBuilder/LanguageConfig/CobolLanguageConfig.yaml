---
#
# Licensed materials - Property of IBM
# 5655-AC5 Copyright IBM Corp. 2024, 2025
# All rights reserved
# US Government users restricted rights  -  Use, duplication or
# disclosure restricted by GSA ADP schedule contract with IBM Corp.
#
####################################
# Cobol language configuration
#################################### 

version: 1.0.2
tasks:
  # Cobol Language task
  - language: Cobol

    # source file association patterns
    sources:
      - "**/cobol/*.cbl"
      
    # overridable variables
    variables:
    
      # Support language configuration YAML files
      - name: useLanguageConfiguration
        value: true
        
      # File configuration YAML source file  
      - name: configSource
        value: ${APP_DIR}/config/${FILE_NAME}.yaml
       
      # Default base compiler parms overridden by file configuration files 
      - name: compileParmsBase
        value: ""
        
      # conditional variable builds compile parameters
      - name: compileParms
        value: ${compileParmsBase}
        append:
          - condition: 
              exists: errPrefix
            value: ADATA,EX(ADX(ELAXMGUX))
          - condition: 
              exists: debug
              eval: ${debug}
            value: TEST
            
      # flag to perform linkedit
      - name: doLinkEdit
        value: true
        
      # default link edit parameters
      - name: linkEditParms
        value: MAP,RENT
        
      # default dependency search path for single repository build
      - name: dependencySearchPath
        value: search:${WORKSPACE}/?path=${APP_DIR_NAME}/copybook/*.cpy

      # flag incating to scan the load module for static link dependencies  
      - name: scanLoadModule
        value: true
        
      # Uncomment to resolve logical files using resolveSubsystems
      # - name: subsystemSearchPath
      #   value: ${dependencySearchPath}

    # datasets that need to be created / validated for this language configuration
    datasets:
      - name: ${HLQ}.COBOL
        options: cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)
      - name: ${HLQ}.COPY
        options: cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)
      - name: ${HLQ}.BMS.COPY
        options: cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)
      - name: ${HLQ}.DBRM
        options: cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)
      - name: ${HLQ}.OBJ
        options: cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)
      - name: ${HLQ}.LOAD
        options: cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

    # list of steps to execute for each program processed by this language configuration
    steps:
    
      # Load language configuration overrides from YAML files
      # LanguageConfig.groovy requires that variable 'configSource' be set above.
      - step: LanguageConfiguration
        type: task
        script: groovy/LanguageConfig.groovy
        condition: ${useLanguageConfiguration}
      
      # Copy build file and dependency files to data sets
      - step: copySrc
        type: copy
        target: //'${HLQ}.COBOL(${MEMBER})'
        dependencyCopy:
          - search: ${dependencySearchPath}
            mappings:
              - source: "**/*"
                dataset: ${HLQ}.COPY
                
      # COBOL compile step          
      - step: compile
        type: mvs
        pgm: IGYCRCTL
        parm: ${compileParms}
        maxRC: 4
        dds:
          - { name: "SYSIN", dsn: "${HLQ}.COBOL(${MEMBER})", options: "shr", input: true }
          - { name: "SYSLIN", dsn: "${HLQ}.OBJ(${MEMBER})", options: "shr", output: true }
          - { name: "TASKLIB", dsn: "${SIGYCOMP}", options: "shr" }
          - {                  dsn: "${SDFHLOAD}", condition: "${IS_CICS}", options: "shr" }
          - {                 dsn: "${SDSNLOAD}", condition: "${IS_SQL}", options: "shr" }
          - {                 dsn: "${SFELLOAD}", condition: { exists: "SFELLOAD" }, options: "shr" }
          - { name: "SYSPRINT", log: "${LOGS}/${STEP}-${FILE_NAME}.log", logEncoding: "${LOG_ENCODING}", logMode: ASA_TEXT, options: "cyl space(5,5) unit(vio) blksize(133) lrecl(133) recfm(f,b) new" }
          - { name: "SYSMDECK", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT1", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT2", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT3", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT4", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT5", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT6", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT7", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT8", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new"}
          - { name: "SYSUT9", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT10", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT11", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT12", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT13", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT14", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT15", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT16", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSUT17", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "SYSLIB", dsn: "${HLQ}.COPY", options: "shr" }
          - {                 dsn: "${HLQ}.BMS.COPY", options: "shr" }
          - {                 dsn: "${SDFHCOB}", condition: "${IS_CICS}", options: "shr" }
          - {                 dsn: "${SCSQCOBC}", condition: "${IS_MQ}", options: "shr" }
          - { name: "DBRMLIB", dsn: "${HLQ}.DBRM(${MEMBER})", condition: "${IS_SQL}", options: "shr", output: true, deployType: "DBRM" }          
          - { name: "SYSADATA", condition: { exists: "errPrefix" }, options: "DUMMY" }
          - { name: "SYSXMLSD", condition: { exists: "errPrefix" }, dsn: "${HLQ}.${errPrefix}.SYSXMLSD.XML", options: "tracks space(200,40) dsorg(PS) blksize(27998) lrecl(16383) recfm(v,b) new keep" }


      # Link-Edit step
      - step: linkEdit
        type: mvs
        pgm: IEWBLINK
        parm: ${linkEditParms}
        condition: ${doLinkEdit}
        maxRC: 0
        dds:
          - { name: "SYSLIN", dsn: "${HLQ}.OBJ(${MEMBER})", options: "shr" }
          - { name: "SYSLMOD", dsn: "${HLQ}.LOAD(${MEMBER})", options: "shr", output: true, deployType: "LOAD", scan: "${scanLoadModule}" }
          - { name: "SYSPRINT", log: "${LOGS}/${STEP}-${FILE_NAME}.log", logEncoding: "${LOG_ENCODING}", options: "cyl space(5,5) unit(vio) blksize(133) lrecl(133) recfm(f,b) new" }
          - { name: "SYSUT1", options: "cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new" }
          - { name: "RESLIB", condition: { exists: RESLIB }, options: "shr" }
          - { name: "SYSLIB", dsn: "${HLQ}.OBJ", options: "shr" }
          - {                 dsn: "${SCEELKED}", options: "shr" }
          - {                 dsn: "${SDFHLOAD}", condition: "${IS_CICS}", options: "shr" }
          - {                 dsn: "${SDSNLOAD}", condition: "${IS_SQL}", options: "shr" }

