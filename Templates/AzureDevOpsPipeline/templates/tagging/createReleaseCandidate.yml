###########
# ADO template to compute and create the release tag
# 
# High-level flow
#  -1- retrieves the git repository to obtain the baselineReference tag
#  -2- computes the name of the next release based on the pipeline parameter `releaseType` (major, minor, patch)
#  -3- validates if a release candidate exits (using AZ CLI) and computes the next release candidate name 
#  -4- creates the git tag using the AZ CLI REST interface and the provided automation token
#
# Outputs
#  - Stores the stage variable nextReleaseName as an output of this stage for subsequent stages,
#    for instance to create the release tag when the package is deployed to the production environment.
#
# Pre-Requisites 
#  - AZ CLI installed on the runner 


steps:
  - checkout: self
    path: $(application)
  - bash: |

      # local Variables
      rc=0
      PGM="tagging/createReleaseCandidate.yml"
      baselineRefPath="application-conf/baselineReference.config"

      # Only un if releaseType variable is defined
      if [ ! -z "$(releaseType)" ]; then

        # Locate the baseline reference file based on the baselineReferenceLocation config in pipelineBackend.config
        # $(Pipeline.Workspace)/application-conf/baselineReference.config
        baselineReferenceFile="$(Pipeline.Workspace)/$(application)/${baselineRefPath}"

        # check for dirs $(application)
        if [ ! -f "${baselineReferenceFile}" ]; then 
          if [ -f "$(Pipeline.Workspace)/$(application)/$(application)/${baselineRefPath}" ]; then
            echo "${PGM}: [INFO] Detected the application repository (${App}) within the git repository layout structure."
            baselineReferenceFile="$(Pipeline.Workspace)/$(application)/$(application)/${baselineRefPath}"
          fi
        fi

        #-1- retrieve the baseline reference from the baselineReferenceFile
        if [ ! -f "${baselineReferenceFile}" ]; then
          rc=8
          ERRMSG="${PGM}: [ERROR] Applications baseline reference configuration file (${baselineReferenceFile}) was not found. rc="$rc
          echo $ERRMSG
        else
          mainBranchSegment=$(echo $(branch) | awk -F "/" ' { print $1 }')
          secondBranchSegment=$(echo $(branch) | awk -F "/" ' { print $2 }')
          thirdBranchSegment=$(echo $(branch) | awk -F "/" ' { print $3 }')

          case $mainBranchSegment in
            "main")
              baselineRef=$(cat "${baselineReferenceFile}" | grep -m 1 "^${mainBranchSegment}" | awk -F "=" ' { print $2 }')
              ;;
            "release")
              baselineRef=$(cat "${baselineReferenceFile}" | grep -m 1 "^release/${secondBranchSegment}" | awk -F "=" ' { print $2 }')
              ;;
          esac

          if [ -z "${baselineRef}" ]; then
            rc=8
            ERRMSG="${PGM}: [ERROR] No baseline ref was found for branch name ${Branch} in ${baselineReferenceFile}. rc="$rc
            echo $ERRMSG
          fi
          ##DEBUG ## echo -e "baselineRef \t: ${baselineRef}"    ## DEBUG
        fi

        # echo baseline Tag = ${baselineRef} # Debug

        #-2- computes the name of the next release based on the pipeline parameter `releaseType` (major, minor, patch)
        if [ $rc -eq 0 ]; then
          # echo "create new release candidate" # Debug
          if [ "$(releaseType)" == "patch" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$3 += 1 ; print}')
          fi
          if [ "$(releaseType)" == "minor" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$2 += 1 ; $3 = 0; print}')
          fi
          if [ "$(releaseType)" == "major" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$1 += 1 ; $2 = 0; $3 = 0; print}')
          fi
          export newVersionTag=$(echo "rel-${newVersionTag}")
          echo "${PGM}: [INFO] Name of next planned release is ${newVersionTag}"
          # Store a the newVersionTag name as an ADO variable 
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-multi-job-output-variable
          echo "##vso[task.setvariable variable=nextReleaseName;isOutput=true]${newVersionTag}"
        fi

        #-3- Compute the name of the next release candidate
        if [ $rc -eq 0 ]; then
          # Fetch exiting release candidate via AZ cli and some grep operations
          # validates if a release candidate exits (using AZ CLI)
          releaseCandidate=$(az repos ref list --org $(System.CollectionUri) --project $(System.TeamProjectId) -r $(application) --filter tags --query '[?name].name | sort(@)' | grep ${newVersionTag}_rc | tail -n 1)

          if [ -z "${releaseCandidate}" ]; then
            # initial version tag
            export newVersionTag=$(echo "${newVersionTag}_rc00" | tr -d \")
          else
            # bump up release candidate number
            export newVersionTag=$(echo $releaseCandidate | sed 's/^["refs\/tags\/rel-]*//g' | awk -F "rc" '{a=++$2; printf("rel-"$1"rc%02d\n",a)}' | tr -d \")
          fi

        fi

        #-4- creates the git tag using the AZ CLI REST interface and the provided automation token
        if [ $rc -eq 0 ]; then
          echo "${PGM}: [INFO] Creating new release candidate tag with name ${newVersionTag}"

          az rest \
            --method post \
            --headers "Authorization=Bearer $AZURE_DEVOPS_EXT_PAT" \
            --url $(System.CollectionUri)/$(System.TeamProjectId)/_apis/git/repositories/$(application)/annotatedtags\?api-version\=7.1-preview.1 \
            --body "{ \"name\": \"${newVersionTag}\",  \"taggedObject\": { \"objectId\": \"$(Build.SourceVersion)\" }, \"message\": \"Release Candidate created by pipeline $(Build.BuildNumber) \"} " \
            --resource 499b84ac-1321-427f-aa17-267ca6975798

          # catch RC rest command return code
          rc=$?

        fi

        if [ $rc -eq 0 ]; then
          echo "${PGM}: [INFO] - AZ REST command has completed successfully."
        else
          echo "${PGM}: [WARNING] - AZ REST command has ended with a return code other than 0. rc="$rc
          exit rc
        fi

      else
        echo "${PGM}: [WARNING] - No release type has been specified."
        exit 1
      fi

    name: tagRelease
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    displayName: "Create Release Candidate Tag"
