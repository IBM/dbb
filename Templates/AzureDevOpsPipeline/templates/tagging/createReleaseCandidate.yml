###########
# ADO template to compute and create the release tag
#
# High-level flow
#  -1- Runs the computeReleaseVersion.sh from the CBS to compute the next release version
#  -2- Retrieves the next release name from the logs and sets it as a pipeline variable
#  -3- Creates a new git tag to indicate the release candidate
#
# Conventions:
#  the tag will be named "rel-<computed-release>-<buildID>"
#
# Outputs
#  - Stores the stage variable nextReleaseName as an output of this stage for subsequent stages,
#    for instance to create the release tag when the package is deployed to the production environment.
#
# Pre-Requisites
#  - AZ CLI installed on the runner

# Change log
# Version   Author   Description
# 2.0       DB       Use CBS computeReleaseVersion

steps:
  - checkout: none
    path: $(application)
  - task: SSH@0
    condition: succeeded()
    displayName: "Compute next release name"
    inputs:
      sshEndpoint: $(zosSSHConnection)
      runOptions: "commands"
      commands: ". ./.profile && mkdir -p $(uniqueWorkspaceId)/logs/ && computeReleaseVersion.sh -w $(uniqueWorkspaceId) -a $(application) -b $(branch) -r $(releaseType) | tee $(uniqueWorkspaceId)/logs/computeReleaseVersion.log "
      readyTimeout: "20000"
      displayName: "Compute next Release number"
  # Install private SSH key prior to a subsequent cmdline tasks
  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: $(zosSSHKnownHost) # Known Hosts Entry for build LPAR
      sshKeySecureFile: $(zosSSHPrivateKeySecureFile) # Required.Reference to uploaded Private SSH Key that in ADO Pipeline/Libary/SecureFile that is installed for sftp processes
  - task: CmdLine@2
    inputs:
      script: |
          # local Variables
          rc=0
          PGM="tagging/createReleaseCandidate.yml"
          localComputeReleaseVersionLog="$(Build.ArtifactStagingDirectory)/computeReleaseVersion/computeReleaseVersion.log"
          rm -rf "$(Build.ArtifactStagingDirectory)/computeReleaseVersion"
          mkdir "$(Build.ArtifactStagingDirectory)/computeReleaseVersion"

          echo "${PGM}: [INFO] Downloading $(uniqueWorkspaceId)/logs/computeReleaseVersion.log from $(zosHostname) to runner work directory $(Build.ArtifactStagingDirectory)/computeReleaseVersion"
          sftp $(zosSFTPUser)@$(zosHostname):$(uniqueWorkspaceId)/logs/computeReleaseVersion.log "\"$(Build.ArtifactStagingDirectory)/computeReleaseVersion\""

          if [ -f "${localComputeReleaseVersionLog}" ]; then
            iconv -f IBM-1047 -t UTF-8 "${localComputeReleaseVersionLog}" >"${localComputeReleaseVersionLog}.utf8"
            nextReleaseVersion=$(cat "${localComputeReleaseVersionLog}.utf8" | sed -n 's/.*The next release version: \(rel-[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          else
            rc=8
            ERRMSG="[ERROR] The log file '${localComputeReleaseVersionLog}' was not found. Please inspect azure runner environment and log output. rc="$rc
            echo "${PGM}: $ERRMSG"
          fi

          # Check nextReleaseVersion variable retrieved by sed
          if [ $rc -eq 0 ]; then
            if [ -z "${nextReleaseVersion}" ]; then
              rc=8
              ERRMSG="[ERROR] The name of the next release could not be parsed. Check stage and $(Build.ArtifactStagingDirectory)/computeReleaseVersion on the ADO runner environment. rc="$rc
              echo "${PGM}: $ERRMSG"
            else
              echo "${PGM}: [INFO] Retrieved next release version: $nextReleaseVersion"
              echo "##vso[task.setvariable variable=nextReleaseVersion;isOutput=true]$nextReleaseVersion"
            fi
          fi

          # Set new Git tag
          if [ $rc -eq 0 ]; then

            newVersionTag="${nextReleaseVersion}.$(buildNumber)"
            echo "${PGM}: [INFO] Creating new release candidate tag with name: ${newVersionTag}"

            az rest \
              --method post \
              --headers "Authorization=Bearer $AZURE_DEVOPS_EXT_PAT" \
              --url $(System.CollectionUri)/$(System.TeamProjectId)/_apis/git/repositories/$(application)/annotatedtags\?api-version\=7.1-preview.1 \
              --body "{ \"name\": \"${newVersionTag}\",  \"taggedObject\": { \"objectId\": \"$(Build.SourceVersion)\" }, \"message\": \"Release Candidate created by pipeline $(Build.BuildNumber) \"} " \
              --resource 499b84ac-1321-427f-aa17-267ca6975798
            # catch RC of rest command
            rc=$?

            if [ $rc -eq 0 ]; then
              echo "${PGM}: [INFO] - AZ REST command has completed successfully."
            else
              echo "${PGM}: [ERROR] - AZ REST command has ended with a return code "$rc
            fi
          fi

          # Eval results
          if [ $rc -eq 0 ]; then
            echo "${PGM}: [INFO] - Creation of Git tag completed successfully."
          else
            echo "${PGM}: [ERROR] - Creation of Git tag failed. Please check logs. rc="$rc
            exit $rc
          fi
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    displayName: "Create Release Candidate Tag"
    name: computeReleaseName
