###########
# ADO template to compute and create the release tag
#
# High-level flow
#  -1- Runs the computeReleaseVersion.sh from the CBS to compute the next release version
#  -2- Retrieves the next release name from the logs and sets it as a pipeline variable
#  -3- Creates a new git tag to indicate the release candidate
#
# Conventions:
#  the tag will be named "rel-<computed-release>-<buildID>"
#
# Outputs
#  - Stores the stage variable nextReleaseName as an output of this stage for subsequent stages,
#    for instance to create the release tag when the package is deployed to the production environment.
#
# Pre-Requisites
#  - AZ CLI installed on the runner

# Change log
# Version   Author   Description
# 2.0       DB       Use CBS computeReleaseVersion

steps:
  - checkout: none
    path: $(application)
  - task: SSH@0
    condition: succeeded()
    displayName: "Compute next release name"
    inputs:
      sshEndpoint: $(zosSSHConnection)
      runOptions: "commands"
      commands: ". ./.profile && mkdir -p $(uniqueWorkspaceId)/logs/ && computeReleaseVersion.sh -w $(uniqueWorkspaceId) -a $(application) -b $(branch) -r $(releaseType) | tee $(uniqueWorkspaceId)/logs/computeReleaseVersion.log "
      readyTimeout: "20000"
      displayName: "Compute next Release number"
  # Install private SSH key prior to a subsequent cmdline tasks
  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: $(zosSSHKnownHost) # Known Hosts Entry for build LPAR
      sshKeySecureFile: $(zosSSHPrivateKeySecureFile) # Required.Reference to uploaded Private SSH Key that in ADO Pipeline/Libary/SecureFile that is installed for sftp processes
  - task: CmdLine@2
    inputs:
      script: |
        # local Variables
        rc=0
        PGM="tagging/createReleaseCandidate.yml"

        rm -rf "$(Build.ArtifactStagingDirectory)/computeReleaseVersion" 
        mkdir "$(Build.ArtifactStagingDirectory)/computeReleaseVersion" 
        sftp $(zosSFTPUser)@$(zosHostname):$(uniqueWorkspaceId)/logs/computeReleaseVersion.log "\"$(Build.ArtifactStagingDirectory)/computeReleaseVersion\""
        iconv -f IBM-1047 -t UTF-8 "$(Build.ArtifactStagingDirectory)/computeReleaseVersion/computeReleaseVersion.log" > "$(Build.ArtifactStagingDirectory)/computeReleaseVersion/computeReleaseVersion.log.utf8"
        nextReleaseVersion=$(cat "$(Build.ArtifactStagingDirectory)/computeReleaseVersion/computeReleaseVersion.log.utf8" | sed -n 's/.*The next release version: \(rel-[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')

        if [ -z "${nextReleaseVersion}" ]; then
            rc=8
            ERRMSG="[ERROR] The name of the next release could not be parsed. Check stage and $(Build.ArtifactStagingDirectory)/computeReleaseVersion on the ADO runner environment. rc="$rc
            echo "${PGM}: $ERRMSG"
            exit $rc
        else 
            echo "Retrieved next release version: $nextReleaseVersion"
            echo "##vso[task.setvariable variable=nextReleaseVersion;isOutput=true]$nextReleaseVersion"

            # local Variables
            PGM="tagging/createReleaseCandidate.yml"

            if [ -z "${nextReleaseVersion}" ]; then
                          rc=8
                          ERRMSG="[ERROR] The ADO variable "nextReleaseVersion" cannot be found or is empty. rc="$rc
                          echo "${PGM}: $ERRMSG"
                          exit $rc
            fi

            # Only un if releaseType variable is defined
            if [ -n "$(releaseType)" ] && [ $rc -eq 0 ]; then

              newVersionTag="${nextReleaseVersion}.$(buildNumber)"

              if [ $rc -eq 0 ]; then
                echo "${PGM}: [INFO] Creating new release candidate tag with name ${newVersionTag}"

                az rest \
                  --method post \
                  --headers "Authorization=Bearer $AZURE_DEVOPS_EXT_PAT" \
                  --url $(System.CollectionUri)/$(System.TeamProjectId)/_apis/git/repositories/$(application)/annotatedtags\?api-version\=7.1-preview.1 \
                  --body "{ \"name\": \"${newVersionTag}\",  \"taggedObject\": { \"objectId\": \"$(Build.SourceVersion)\" }, \"message\": \"Release Candidate created by pipeline $(Build.BuildNumber) \"} " \
                  --resource 499b84ac-1321-427f-aa17-267ca6975798

                # catch RC rest command return code
                rc=$?

              fi

              if [ $rc -eq 0 ]; then
                echo "${PGM}: [INFO] - AZ REST command has completed successfully."
              else
                echo "${PGM}: [WARNING] - AZ REST command has ended with a return code "$rc
                exit rc
              fi

            else
              echo "${PGM}: [WARNING] - No release type has been specified."
              exit 1
            fi

        fi
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    displayName: "Create Release Candidate Tag"
    name: computeReleaseName
