# Branches that triggers this pipleline
trigger:
  - feature/*
  - release/*
  - hotfix/*
  - epic/*
  - main

# Pipeline input parameters to drive build and release pipelines
parameters:
  - name: pipelineType
    displayName: "Pipeline Type"
    type: string
    default: build
    values:
      - build
      - release
      - preview
  - name: releaseType
    displayName: "Release Type"
    type: string
    default: patch
    values:
      - major
      - minor
      - patch

  - name: verboseLogging
    displayName: "zAppBuild verbose logging"
    type: boolean
    default: false

# pipeline templates
resources:
  repositories:
    - repository: templates
      type: git
      name: PipelineCore/PipelineCore

# Agent pool where the pipeline runs
pool:
  name: $(agentPool)

# Variables used in the pipeline
variables:
  ### Variables to be created in Azure pipeline
  # ) agentPool                            # Agent pool name for Azure Agents to connect to MVS
  # ) zosSSHConnection                     # zOS - SSH connection name
  # ) zosSSHKnownHost                      # Known host entry for secure shell connections
  # ) zosSSHPrivateKeySecureFile           # Reference to uploaded Private SSH Key that in ADO Pipeline/Libary/SecureFile that is installed for sftp processes
  # ) pipelineWorkspace                    #Â Root directory on z/OS Unix System services to perform builds. E.g. `/u/ado/workspace`
  # ) zosHostname                          # zOS - Host IP for SFTP connection
  # ) zosSFTPUser                          # zOS - Host user for SFTP connection
  # ) azureArtifactFeedID                  # Feed ID of the Azure artifact for publishing the package
  # ) azureArtifactVersionOption           # Azure artifact version option (major, minor, fix)

  ### Environment variables to be added in z/OS Unix System Services $HOME/.profile
  #  To locate the backend scripts. See also Installation of backend scripts.
  #  PIPELINE_SCRIPTS:
  #  Ex: export PIPELINE_SCRIPTS=/var/dbb/Common-Backend-Scripts
  #      export PATH=$PIPELINE_SCRIPTS:$PATH

  ### Variables generated during run time
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}: # Extract branch name for push
    branch: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}: # Extract branch name for pull request
    branch: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  buildNumber: $(Build.BuildNumber) # Build number
  organization_tmp: $[ replace(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/', '') ] # Generate Azure repository uri for cloning
  organization: $[ replace(variables['organization_tmp'], '/', '') ] # Azure organization name
  project: $(System.TeamProject) # Project name
  application: ${{ variables['Build.Repository.Name'] }} # Application name
  repo: "git@ssh.dev.azure.com:v3/$(organization)/$(project)/$(application)" # Git repository path
  uniqueWorkspaceId: $(pipelineWorkspace)/$(application)/$(branch)/build-$(buildNumber) # Calculated worksapce path
  # Azure package name. Package names must contain only lowercase alphanumeric segments separated by a dash, dot or underscore.
  reformattedBranchName: $[ replace(variables['branch'], '/', '-')]
  lowerApplicatioName: $[ lower(variables['application']) ]
  lowerReformattedBranchName: $[ lower(variables['reformattedBranchName']) ]
  azureArtifactName: $(lowerReformattedBranchName)-$(lowerApplicatioName).tar
  packageName: $(application) # Name of the Package
  pipelineType: ${{ parameters.pipelineType }}
  releaseType: ${{ parameters.releaseType }}
  isMain: $[contains(variables['Build.SourceBranch'], 'main')] # Variable to indicate pipeline for the main branch
  # Computation DBB verbose logging
  ${{ if eq(parameters.verboseLogging, true) }}: 
    verbose: "-v"
  ${{ if eq(parameters.verboseLogging, false) }}:
    verbose: ""

# Pipeline stages
stages:
  - stage: Setup
    jobs:
      - job: Setup
        continueOnError: false
        steps:
          - checkout: none
          # Display CI-CD pipeline parms
          - script: |
              echo " "
              echo "Following are the CI-CD pipeline parameters"
              echo "*******************************************"
              echo "zosSSHConnection           = $(zosSSHConnection)"
              echo "zosHostname                = $(zosHostname)"
              echo "zosSFTPUser                = $(zosSFTPUser)"
              echo "ussWorkspaceRoot           = $(pipelineWorkspace)"
              echo "ussWorkspaceDir            = $(uniqueWorkspaceId)"
              echo "verbose                    = ${{ parameters.verboseLogging }} "
              echo "branch                     = $(branch)"
              echo "buildNumber                = $(buildNumber)"
              echo "organization               = $(organization)"
              echo "project                    = $(project)"
              echo "application                = $(application)"
              echo "repo                       = $(repo)"
              echo "pipelineType               = $(pipelineType)"
              echo "releaseType                = $(releaseType)"
              # Below is comment as a reference for Azure Artifacts
              #echo "azureArtifactName          = $(azureArtifactName)"
              #echo "azureArtifactFeedID        = $(azureArtifactFeedID)"
              #echo "azureArtifactVersionOption = $(azureArtifactVersionOption)"
              echo " "
            displayName: "Display CI-CD pipeline parms"
      - job: Clone # Git clone
        displayName: "Clone repository"
        dependsOn: Setup
        steps:
          - checkout: none
          - task: SSH@0
            inputs:
              sshEndpoint: $(zosSSHConnection)
              runOptions: "commands"
              commands: ". ./.profile && gitClone.sh -w $(uniqueWorkspaceId) -r $(repo) -b $(branch)"
              readyTimeout: "20000"
            displayName: "Clone application repo"

  ## Build stage
  # Invoke build and create a release candidate tag

  - stage: Build
    dependsOn:
      - Setup
    jobs:
      - job: Build
        displayName: "Build"
        steps:
          - checkout: none
          - task: SSH@0
            inputs:
              sshEndpoint: $(zosSSHConnection)
              runOptions: "commands"
              commands: ". ./.profile && dbbBuild.sh -w $(uniqueWorkspaceId) -a $(application) -b $(branch) -p $(pipelineType) ${{variables.verbose}}"
              readyTimeout: "20000"
            displayName: "Build application"
      - job: PublishBuildLogs
        displayName: "Publish build logs"
        dependsOn: Build
        condition: always()
        steps:
          - checkout: none
          - task: SSH@0
            inputs:
              sshEndpoint: $(zosSSHConnection)
              runOptions: "commands"
              commands: ". ./.profile && prepareLogs.sh -w $(uniqueWorkspaceId)"
              readyTimeout: "20000"
            displayName: "Prepare build logs"

          # Install private SSH key prior to subsequent cmdline tasks
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: $(zosSSHKnownHost) # Known Hosts Entry for build LPAR
              sshKeySecureFile: $(zosSSHPrivateKeySecureFile) # Required.Reference to uploaded Private SSH Key that in ADO Pipeline/Libary/SecureFile that is installed for sftp processes

          - task: CmdLine@2
            inputs:
              script: |
                rm -rf "$(Build.SourcesDirectory)/build-logs" 
                mkdir "$(Build.SourcesDirectory)/build-logs" 
                sftp $(zosSFTPUser)@$(zosHostname):$(uniqueWorkspaceId)/*.tar "\"$(Build.SourcesDirectory)/build-logs\""
                tar -xvf "$(Build.SourcesDirectory)/build-logs/logs.tar" -C "$(Build.SourcesDirectory)/build-logs"
            displayName: "Stage the build logs"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/build-logs/logs"
              ArtifactName: "build-logs"
              publishLocation: "Container"
            displayName: "Publish build logs"

      # Create release candidate tag
      - job: Tag
        displayName: "Create Release Candidate tag"
        condition: and(succeeded(), eq(variables['pipelineType'], 'release'))
        dependsOn: Build
        steps:
          - template: tagging/createReleaseCandidate.yml@templates

  ## Packaging stage
  # Store build outputs in appropriate artifact repository
  # Uses the CBS PackageBuildOutputs sample

  - stage: Package
    displayName: "Packaging"
    condition: and(succeeded(), not(eq(variables['pipelineType'], 'preview')))
    dependsOn:
       - Build
    jobs:
      - job: Package
        displayName: "Package Outputs"
        steps:
          - checkout: none
          #- task: SSH@0
          #  inputs:
          #    sshEndpoint: $(zosSSHConnection)
          #    runOptions: 'commands'
          #    commands: '. ./.profile && ucdPackaging.sh -v $(packageName) -c $(application) -w $(uniqueWorkspaceId)  -b $(branch) -e $artifactRepoConfig'
          #    readyTimeout: '20000'
          #  displayName: 'Package the build artifacts for Deployment'
          - task: SSH@0
            condition: succeeded()
            inputs:
              sshEndpoint: $(zosSSHConnection)
              runOptions: "commands"
              commands: ". ./.profile && packageBuildOutputs.sh -w $(uniqueWorkspaceId) -a $(application) -b $(branch) -p $(pipelineType) -r $(packageVersion) -i $(buildNumber)"
              # For reference when creating a local tar file, skipping the upload
              #commands: ". ./.profile && packageBuildOutputs.sh -w $(uniqueWorkspaceId) -t $(application).tar -a $(application) -b $(branch) -p $(pipelineType) -v $(packageVersion)"
              readyTimeout: "20000"
            displayName: "Package the build artifacts for Deployment"
        variables:
            ${{ if eq(variables['pipelineType'], 'release') }}: # Retrieve the version name from the release candidate
              packageVersion: $[ stageDependencies.Build.Tag.outputs['computeReleaseName.nextReleaseVersion'] ]
            ${{ if not(eq(variables['pipelineType'], 'release')) }}: # Default for all other cases
              packageVersion: $(packageName)

        # Alternate upload option to demonstrate to upload package to Azure DevOps Artifacts
#      - job: PublishPackage
#        displayName: "Publish deployment package"
#        dependsOn: Package
#        steps:
#          # Install private SSH key prior to a subsequent cmdline tasks
#          - task: InstallSSHKey@0
#            inputs:
#              knownHostsEntry: $(zosSSHKnownHost) # Known Hosts Entry for build LPAR
#              sshKeySecureFile: $(zosSSHPrivateKeySecureFile) # Required.Reference to uploaded Private SSH Key that in ADO Pipeline/Libary/SecureFile that is installed for sftp processes

#          - task: CmdLine@2
#            inputs:
#              script: |
#                rm -rf "$(Build.SourcesDirectory)/deploymentPackage" 
#                mkdir "$(Build.SourcesDirectory)/deploymentPackage" 
#                sftp $(zosSFTPUser)@$(zosHostname):$(uniqueWorkspaceId)/logs/$(application).tar "\"$(Build.SourcesDirectory)/deploymentPackage/$(azureArtifactName)\""
#            displayName: "Stage the deployment package"
#          - task: UniversalPackages@0
#            inputs:
#              command: "publish"
#              publishDirectory: "$(Build.SourcesDirectory)/deploymentPackage"
#              feedsToUsePublish: "internal"
#              vstsFeedPublish: "$(azureArtifactFeedID)"
#              vstsFeedPackagePublish: "$(azureArtifactName)"
#              versionOption: "$(azureArtifactVersionOption)"
#            displayName: "Publish deployment package to Azure artifacts"

  ## Deployment to development test environment
  # deployments to these test environment can only happen when the development team requests a build / release pipeline
  # this step is automatically executed for build / release pipelines

  - stage: Deploy_DEVINT
    dependsOn:
      - Build
      - Package
    displayName: "Deploy DevInt"
    condition: and(succeeded(), eq(variables.isMain, true), not(eq(variables['pipelineType'], 'preview')))
    variables:
      Environment: Integration
      ${{ if eq(variables['pipelineType'], 'release') }}: # Retrieve the version name from the release candidate
         packageVersion: $[ stageDependencies.Build.Tag.outputs['computeReleaseName.nextReleaseVersion'] ]
      ${{ if not(eq(variables['pipelineType'], 'release')) }}: # Default for all other cases
         packageVersion: $(packageName)
    jobs:
      - template: deployment/deployPackage.yml@templates
        parameters:
          environmentName: ${{ variables.Environment }}
          packageVersion: "$(packageVersion)"

  ## Deployment to higher test environments
  # deployments to these test environment can only happen when the development team requests a release pipeline

  # Acceptance Test environment
  - stage: Deploy_ACCEPTANCE
    displayName: "Deploy Acceptance"
    dependsOn: 
      - Build
      - Deploy_DEVINT
    condition: and(succeeded(), eq(variables.isMain, true), eq(variables['pipelineType'], 'release'))
    variables:
      Environment: Acceptance
      ${{ if eq(variables['pipelineType'], 'release') }}: # Retrieve the version name from the release candidate
         packageVersion: $[ stageDependencies.Build.Tag.outputs['computeReleaseName.nextReleaseVersion'] ]
      ${{ if not(eq(variables['pipelineType'], 'release')) }}: # For all other cases
         packageVersion: $(packageName)
    jobs:
      - template: deployment/deployPackage.yml@templates
        parameters:
          environmentName: ${{ variables.Environment }}
          packageVersion: "$(packageVersion)"

  # Add additional deployment stages as you need.

  # Production environment
  - stage: Deploy_PRODUCTION
    displayName: "Deploy Production"
    dependsOn: 
      - Build
      - Deploy_ACCEPTANCE
    condition: and(succeeded(), eq(variables.isMain, true), eq(variables['pipelineType'], 'release'))
    variables:
      Environment: Production
      ${{ if eq(variables['pipelineType'], 'release') }}: # Retrieve the version name from the release candidate
         packageVersion: $[ stageDependencies.Build.Tag.outputs['computeReleaseName.nextReleaseVersion'] ]
      ${{ if not(eq(variables['pipelineType'], 'release')) }}: # For all other cases
         packageVersion: $(packageName)      
    jobs:
      - template: deployment/deployPackage.yml@templates
        parameters:
          environmentName: ${{ variables.Environment }}
          packageVersion: "$(packageVersion)"
          
  # Cleanup
  - stage: Cleanup
    condition: always()
    jobs:
      - job: Cleanup
        displayName: "Cleanup Build environment"
        steps:
          - checkout: none
          - task: SSH@0
            inputs:
              sshEndpoint: $(zosSSHConnection)
              runOptions: "commands"
              commands: ". ./.profile && deleteWorkspace.sh -w $(uniqueWorkspaceId)"
              readyTimeout: "20000"
            displayName: "Delete Build Folder on USS"
