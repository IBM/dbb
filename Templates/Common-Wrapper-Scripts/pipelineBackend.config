################################################################################
# Customization - File
#
# Generic pipeline backend scripts
#
# This file contains the customization of the common settings for the backend
# scripts.
#
# Security advice:
# The file should only protected using the permission bits.
# Grant read/write access to the administrators of the backend scripts
# Grant read/execute access to the pipeline users which will execute the backend
#  scripts
#
################################################################################

## Shared Configuration parameters #############################################

# common root directory to process pipeline activities
# assumed to be a mounted zFS system used as the working dir
# 
# PIPELINE_WORKSPACE is an environment variable configured
#  in the profile of the pipeline user
# Alternatively specify a absolute path
buildRootDir="$PIPELINE_WORKSPACE" 

# Relative directory name for outputs
# default: logsDir="logs"  
logsDir="logs"                         

## Shared Configuration parameters - End ########################################

#################################################################################
## DBB-BUILD.sh parameters ######################################################
#################################################################################

# Path to main build script build.groovy.
zAppBuild="$HOME/dbb-zappbuild"

# (Optional) Additional property files to customize the build framework
zAppBuildPropFiles=""            

# High-Level Data Set Qualifier used for the DBB Build.
# This prefix value will be used along with the
# branch name to construct the final fully qualified
# output Data Set name. Note that the maximum length of
# this value exceed 26 characters. Review the
# "Build Type Customization"section below for additional
# information in DBB-Build.sh .
# Default: TSO user running the build
HLQPrefix="${USER}"

# Pattern to locate the configuration baseline configuration
# from where the script is obtaining the baseline git hash for the given
# branch name
baselineReferenceLocation="application-conf/baselineReference.config"

# Encoding for output logs by DBB-Build.sh 
LogEncoding="UTF-8"            

# zAppBuild Verbose Tracing. (0=Disabled, 1=Enabled)
#  Can be overridden by the -v option to the wrapper script
Verbose=0             
             
# DBB Toolkit SLF4J Logging. To utilize, the
# "simplelogger.properties" file must reside in
# "WorkDir/Workspace/App/application-conf"
# (0=Disabled, 1=Enabled)
LoggerConfig=0 

# DBB Metadata store credential configuration
# JDBC user connecting to the DBB Metadatastore
#  Default = None, Required.
dbbMetadataStoreJdbcId=""

# Absolute path to DBB file containing encrypted password 
#  Default = None, Required.
dbbMetadataStoreJdbcPwdFile=""

# JDBC connection server url
# sample jdbc:db2://10.3.20.201:4740/MOPDBC0
# Optional if zAppBuild is configured to use the 
#   metadataStoreDb2ConnectionConf property
dbbMetadataStoreJdbcUrl=""

#################################################################################
## DBB-BUILD.sh parameters -end    ##############################################
#################################################################################

#################################################################################
## ucdPackaging.sh parameters      ##############################################
#################################################################################

# Path to dbb-ucd-packaging.groovy script from the DBB community repository
# e.g. PackagingScript="/var/dbb/extensions/dbb20/Pipeline/CreateUCDComponentVersion/dbb-ucd-packaging.groovy"   
PackagingScript="" 

# Path to UCD buztool.sh script
# e.g. BuzTool="/var/ucd-agent/bin/buztool.sh"
BuzTool="/var/ucd-agent/bin/buztool.sh"

#################################################################################
## ucdPackaging parameters -end    ##############################################
#################################################################################

#################################################################################
## UCD-Deploy.sh parameters        ##############################################
#################################################################################

#
# Location of UCD Deploy Script
# e.g. deployScriptLoc=/var/dbb/extensions/dbb20/Pipeline/DeployUCDComponentVersion
deployScriptLoc=""

#
# UCD Server URL
# e.g. ucdServerURL=https://ucd.server:8443/
ucdServerURL=""

#
# UCD User Name
# e.g. ucdUserName=admin
ucdUserName=""

#
# UCD Password
# e.g. ucdPassword=admin
# Protect the file by specifying the correct file permissions
ucdPassword=""


#################################################################################
## UCD-Deploy.sh parameters -end ################################################
#################################################################################

#################################################################################
## Central functions shared across scripts ######################################
#################################################################################
#
# Calculate the absolute path of the working directory
getWorkDirectory(){
    tmpWrkDir=""

    if [[ ${Workspace:0:1} == "/" ]] ; then 
        tmpWrkDir="${Workspace}"; # absolute workspace path
    else
        validateBuildRootDir
        tmpWrkDir="${buildRootDir}/${Workspace}"; # relative workspace path
    fi

    if [ "$nestedApplicationFolder" = "true" ]; then
     echo "${tmpWrkDir}/${App}"
    else
     echo "${tmpWrkDir}" # default
    fi
}
#
# Calculate the absolute path of the log directory
getLogDir() {
    if [[ ${Workspace:0:1} == "/" ]] ; then 
         echo "${Workspace}/${logsDir}" # absolute workspace path
    else
        validateBuildRootDir
         echo "${buildRootDir}/${Workspace}/${logsDir}";  # relative workspace path
    fi
   
}

#
# Calculate the absolute path of the application directory
getApplicationDir(){
    if [[ ${Workspace:0:1} == "/" ]] ; then 
        echo "${Workspace}/${App}";
    else
        validateBuildRootDir
        echo "${buildRootDir}/${Workspace}/${App}";
    fi
}

validateBuildRootDir(){
  if [ -z "${buildRootDir}" ]; then
    rc=4
    ERRMSG=$PGM": [WARNING] Build root directory is required. rc="$rc
    echo $ERRMSG
  else

    if [ ! -d "${buildRootDir}" ]; then
      rc=8
      ERRMSG=$PGM": [ERROR] Build root directory ${buildRootDir} was not found. rc="$rc
      echo $ERRMSG
    fi

  fi
}

## Central functions - end #######################################################