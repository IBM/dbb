name: tagging_createReleaseCandidate
inputs:
  releaseType:
    required: false
    type: string
  runnerWorkspace:
    required: false
    type: string
  githubAccessToken:
    required: true
runs:
  using: composite
  steps:
  - uses: actions/checkout@v4.1.0
    with:
      path: "${{ env.application }}"
  - name: Create Release Candidate Tag
    id: tagRelease
    env:
      GH_TOKEN: ${{ inputs.githubAccessToken }}
    run: |-
      # local Variables
      rc=0
      
      PGM=".github/actions/tagging_createreleasecandidate/action.yml"
      baselineRefPath="application-conf/baselineReference.config"

      # Only un if releaseType variable is defined
      if [ ! -z "${{ inputs.releaseType }}" ]; then

        # Locate the baseline reference file based on the baselineReferenceLocation config in pipelineBackend.config
        baselineReferenceFile="$PWD/${baselineRefPath}"
        

        # check for dirs ${{ env.application }}
        if [ ! -f "${baselineReferenceFile}" ]; then
          if [ -f "${{ inputs.runnerWorkspace }}/${{ env.application }}/${{ env.application }}/${baselineRefPath}" ]; then
            echo "${PGM}: [INFO] Detected the application repository (${App}) within the git repository layout structure."
            baselineReferenceFile="${{ inputs.runnerWorkspace }}/${{ env.application }}/${{ env.application }}/${baselineRefPath}"
          fi
        fi

        #-1- retrieve the baseline reference from the baselineReferenceFile
        if [ ! -f "${baselineReferenceFile}" ]; then
          rc=8
          ERRMSG="${PGM}: [ERROR] Applications baseline reference configuration file (${baselineReferenceFile}) was not found. rc="$rc
          echo $ERRMSG
        else
          mainBranchSegment=$(echo ${{ env.branch }} | awk -F "/" ' { print $1 }') 
          secondBranchSegment=$(echo ${{ env.branch }} | awk -F "/" ' { print $2 }') 
          thirdBranchSegment=$(echo ${{ env.branch }} | awk -F "/" ' { print $3 }')

          case $mainBranchSegment in
            "main")
              baselineRef=$(cat "${baselineReferenceFile}" | grep "^${mainBranchSegment}" | awk -F "=" ' { print $2 }')
              ;;
            "release")
              baselineRef=$(cat "${baselineReferenceFile}" | grep "^release/${secondBranchSegment}" | awk -F "=" ' { print $2 }')
              ;;
          esac

          if [ -z "${baselineRef}" ]; then
            rc=8
            ERRMSG="${PGM}: [ERROR] No baseline ref was found for branch name ${Branch} in ${baselineReferenceFile}. rc="$rc
            echo $ERRMSG
          fi
          # echo -e "baselineRef \t: ${baselineRef}"    ## DEBUG
        fi

        # echo baseline Tag = ${baselineRef} # Debug

        #-2- computes the name of the next release based on the pipeline parameter `releaseType` (major, minor, patch)
        if [ $rc -eq 0 ]; then
          # echo "create new release candidate" # Debug
          if [ "${{ inputs.releaseType }}" == "patch" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$3 += 1 ; print}')
          fi
          if [ "${{ inputs.releaseType }}" == "minor" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$2 += 1 ; $3 = 0; print}')
          fi
          if [ "${{ inputs.releaseType }}" == "major" ]; then
            export newVersionTag=$(echo ${baselineRef} | sed 's/^["refs\/tags\/rel-]*//g' | sed 's/-[a-zA-Z0-9]*//g' | awk -F. -v OFS=. '{$1 += 1 ; $2 = 0; $3 = 0; print}')
          fi
          export newVersionTag=$(echo "rel-${newVersionTag}")
          echo "${PGM}: [INFO] Name of next planned release is ${newVersionTag}"
        fi

        #-3- Compute the name of the next release candidate
        if [ $rc -eq 0 ]; then
          # validates if a release candidate exits (PH, this should be using github cli instead)
          releaseCandidate=$(git tag --list "${newVersionTag}_*rc*" --sort=version:refname | tail -n 1)
          echo "${newVersionTag}" > releaseTag.txt
          if [ -z "${releaseCandidate}" ]; then
            # initial version tag
            export newVersionTag=$(echo "${newVersionTag}_rc00" | tr -d \")
          else
            # bump up release candidate number
            export newVersionTag=$(echo $releaseCandidate | sed 's/^["refs\/tags\/rel-]*//g' | awk -F "rc" '{print "rel-"$1"rc"(-f2 $2+1)}' | tr -d \")
          fi

        fi

        #-4- creates the git tag using the GH CLI interface and the provided automation token
        if [ $rc -eq 0 ]; then
          echo "${PGM}: [INFO] Creating new release candidate tag with name ${newVersionTag}"
          
          gh release create ${newVersionTag} --prerelease

          # catch RC rest command return code
          rc=$?

        fi

        if [ $rc -eq 0 ]; then
          echo "${PGM}: [INFO] - GH command has completed successfully."
        else
          echo "${PGM}: [WARNING] - GH command has ended with a return code other than 0. rc="$rc
          exit rc
        fi

      else
        echo "${PGM}: [WARNING] - No release type has been specified."
        exit 1
      fi
    shell: bash

  - name: Upload version tag artifact
    uses: actions/upload-artifact@v4
    with:
      name: artifactVersion
      path: releaseTag.txt 
