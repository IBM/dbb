#####################################################################################################
# Customization - File
#
# Generic pipeline backend scripts
#
# This file contains the customization of the common settings for the backend
# scripts.
#
# Security advice:
# The file should only protected using the permission bits.
# Grant read/write access to the administrators of the backend scripts
# Grant read/execute access to the pipeline users which will execute the backend
#  scripts
#
#####################################################################################################

#####################################################################################################
## Shared Configuration parameters    ###############################################################
#####################################################################################################

# common root directory to process pipeline activities
# assumed to be a mounted zFS system used as the working dir
# 
# PIPELINE_WORKSPACE is an environment variable configured
#  in the profile of the pipeline user
# Alternatively specify a absolute path
buildRootDir="$PIPELINE_WORKSPACE" 

# Relative directory name for outputs
# default: logsDir="logs"  
logsDir="logs"

#####################################################################################################
## End of Shared Configuration parameters    ########################################################
#####################################################################################################


#####################################################################################################
## DBB-BUILD.sh parameters ##########################################################################
#####################################################################################################

# Path to main build script build.groovy.
zAppBuild="$HOME/dbb-zappbuild"

# (Optional) Additional property files to customize the build framework
zAppBuildPropFiles=""            

# High-Level Data Set Qualifier used for the DBB Build.
# This prefix value will be used along with the
# branch name to construct the final fully qualified
# output Data Set name. Note that the maximum length of
# this value exceed 26 characters. Review the
# "Build Type Customization"section below for additional
# information in DBB-Build.sh .
# Default: TSO user running the build
HLQPrefix="${USER}"

# Pattern to locate the configuration baseline configuration
# from where the script is obtaining the baseline git hash for the given
# branch name
baselineReferenceLocation="application-conf/baselineReference.config"

# Encoding for output logs by DBB-Build.sh 
LogEncoding="UTF-8"            

# zAppBuild Verbose Tracing. (0=Disabled, 1=Enabled)
#  Can be overridden by the -v option to the wrapper script
Verbose=0             
             
# DBB Toolkit SLF4J Logging. To utilize, the
# "simplelogger.properties" file must reside in
# "WorkDir/Workspace/App/application-conf"
# (0=Disabled, 1=Enabled)
LoggerConfig=0 

# DBB Metadata store credential configuration
# JDBC user connecting to the DBB Metadatastore
#  Default = None, Required.
dbbMetadataStoreJdbcId=""

# Absolute path to DBB file containing encrypted password 
#  Default = None, Required.
dbbMetadataStoreJdbcPwdFile=""

# Absolute path to Db2 conf file containing db2 schema etc
#  Default = None, currently only referenced in generateCleanupCommands.sh
dbbMetadataStoreJdbcConfigFile=""

# DBB Metadatastore implementation. 'db2' or 'file' 
# Used to create the housekeeping instructions in generateCleanupCommands.sh
#  Default: dbbMetadataStoreType=db2
dbbMetadataStoreType="db2"

# DBB File Metadatastore location. Only relevant when using dbbMetadataStoreType="file"
#  Default dbbFileMetadataStoreLocation="${HOME}"
dbbFileMetadataStoreLocation="${HOME}"

# JDBC connection server url
# sample jdbc:db2://10.3.20.201:4740/MOPDBC0
# Optional if zAppBuild is configured to use the 
#   metadataStoreDb2ConnectionConf property
dbbMetadataStoreJdbcUrl=""

# Feature branch build behaviour
# options:
# - "incremental" enables default zAppBuild impactBuild option. build list will contain only the
#   changes that got added since the last successful build.
# - "cumulative" enable impactBuild using the baselineRef option to build all contributed changes
#   and any differences to the integration branch (main, release maintenance or epic)
# - "merge-base" enables impactBuild using the baselineRef option. It passes the merge-base 
#   commit. The dbbBuild utilities script computes the merge-base commit, which defines the commit
#    when the feature branch was forked.
featureBranchBuildBehaviour=merge-base

#####################################################################################################
## End of DBB-BUILD.sh parameters    ################################################################
#####################################################################################################

#####################################################################################################
## Fetch Build Dependencies based on Application Descriptor  ########################################
#####################################################################################################

# Setting to enable fetching build dependencies configured within the Application Descriptor
# this leverages the configuration for the publishing script PackageBuildOutputs
# to retrieve build dependencies from the Artifact repo. 
# default: false
fetchBuildDependencies=false

# Settings for caching packages on build machine

# Setting to control if packages should be stored on the build machine
# default: false
enablePackageCache=true

# Location for cachine packages on the build machine
archiveCache=$HOME/cbs/.archiveCache

# Internal file name documenting the fetched external dependencies, that can be tracked in the
# Wazi Deploy application manifest file
# default: externalDependenciesLogName=externalDependenciesLog.yml
externalDependenciesLogName=externalDependenciesLog.yml

#####################################################################################################
## End of Fetch Build Dependencies based on Application Descriptor  #################################
#####################################################################################################

#####################################################################################################
## packageBuildOutputs.sh parameters and configuration   ############################################
#####################################################################################################

# Suffix aligning to naming conventions for name of the Artifact repository within 
# the Artifact repository server. Scripts will prefix it with the application name
# default: artifactRepositoryNameSuffix=repo-local
# leading to <application>-repo-local
# ex. MortgageApplication-repo-local
artifactRepositoryNameSuffix=repo-local

# (Optional) Absolute path of a property file containing default application packaging details. 
# e.g. PkgPropFile="/var/dbb/extensions/dbb20/Pipeline/PackageBuildOutputs/packageBuildOutputs.properties"
# PkgPropFile=""

# (Optional) Flag to add the deploy type extension to the member in the package tar file. 
# Value: true or false, default: true
addExtension=true

# (Optional) Flag to generate an SBOM file as part of the Packaging process 
# Value: true or false, default: false
generateSBOM=false

# (Optional) Name and email of the SBOM author enclosed with double quotes
# Example: "Build Engineer <engineer@example.com>"
sbomAuthor=""

# (Required if SBOM generation is performed)
# Paths to the cycloneDX Java libraries (and their dependencies) to be added to the JAVA CLASSPATH
# Example: /var/dbb/additionalLibraries/cyclonedx-core-java-8.0.3.jar:/var/dbb/additionalLibraries/jackson-annotations-2.16.1.jar:/var/dbb/additionalLibraries/jackson-core-2.16.1.jar:/var/dbb/additionalLibraries/jackson-databind-2.16.1.jar:/var/dbb/additionalLibraries/jackson-dataformat-xml-2.16.1.jar:/var/dbb/additionalLibraries/json-schema-validator-1.2.0.jar:/var/dbb/additionalLibraries/packageurl-java-1.5.0.jar
cycloneDXlibraries=/var/dbb/additionalLibraries/cyclonedx-core-java-8.0.3.jar:/var/dbb/additionalLibraries/jackson-annotations-2.16.1.jar:/var/dbb/additionalLibraries/jackson-core-2.16.1.jar:/var/dbb/additionalLibraries/jackson-databind-2.16.1.jar:/var/dbb/additionalLibraries/jackson-dataformat-xml-2.16.1.jar:/var/dbb/additionalLibraries/json-schema-validator-1.2.0.jar:/var/dbb/additionalLibraries/packageurl-java-1.5.0.jar

#####################################################################################################
#### Artifact repository upload options    ##########################################################
#####################################################################################################
#  the below section configures the Publishing
#  to Artifact Repository such as JFrog Artifactory or Sonartype Nexus
# Note: 
#  These properties only need to be configured if the publishing through the
#  PackageBuildOutputs.groovy script is used. And if publish=true.

# Flag to indicate package upload to the provided Artifactory server.
# Set to true to enable package upload
# can be overridden by cli parm -p
# default: publish=false
publish=false

# URL to the Artifact repository server
# e.q.: artifactRepositoryUrl=http://artifactoryserver:8081/artifactory
artifactRepositoryUrl=""

# User to connect to the Artifact repository server
# e.q.:  artifactRepositoryUser=admin
artifactRepositoryUser=""

# Password to connect to the Artifact repository server
# e.q.: artifactRepositoryPassword=xxxxx
artifactRepositoryPassword=""

# Path of a property file containing application specific artifact repository details.
# application specific artifactRepositoryPropertyFile
# e.q.: application-conf/packageBuildOutputs.properties
# see template:
# https://github.com/IBM/dbb/blob/main/Pipeline/PackageBuildOutputs/appArtifactRepository.properties
artifactRepositoryPropertyFile=""

#####################################################################################################
## End of packageBuildOutputs.sh parameters    ######################################################
#####################################################################################################

#####################################################################################################
## ucdPackaging.sh parameters    ####################################################################
#####################################################################################################

# Path to UCD buztool.sh script
# e.g. BuzTool="/var/ucd-agent/bin/buztool.sh"
BuzTool=""

#####################################################################################################
## End of ucdPackaging.sh parameters    #############################################################
#####################################################################################################

#####################################################################################################
## UCD-Deploy.sh parameters    ######################################################################
#####################################################################################################

#
# UCD Server URL
# e.g. ucdServerURL=https://ucd.server:8443/
ucdServerURL=""

#
# UCD User Name
# e.g. ucdUserName=admin
ucdUserName=""

#
# UCD Password
# e.g. ucdPassword=admin
# Protect the file by specifying the correct file permissions
ucdPassword=""

#####################################################################################################
## End of UCD-Deploy.sh parameters    ###############################################################
#####################################################################################################


#####################################################################################################
## wazideploy-generate.sh, wazideploy-deploy.sh and wazideploy-evidences.sh parameters    ###########
#####################################################################################################

## The next set of variables describes/references existing configuration files/directories for Wazi Deploy

#
# Work directory for Wazi Deploy
# default: waziDeployDir
wdWorkDir=waziDeployDir

#
# Root directory for Wazi Deploy deployment configuration files on the target machine. 
#
# can be used to reference the deployment method and other deployment configuration files
# in addition, this is passed as an extraVars to be used to locate Jinja2 templates and additional configuration yaml files
wdConfigurationDir=""

#
# Wazi Deploy deployment method file
# ex. wdDeploymentMethod="$wdConfigurationDir/deployment-configuration/deployment-method.yml"
wdDeploymentMethod="" 

#
# Path to the environment configurations for Wazi Deploy
# 
# e.g. wdEnvironmentConfigurations="/var/wazideploy/environment-configurations"
#      wdEnvironmentConfigurations="$wdConfigurationDir/environment-configurations"
#  This directory then contains the available environment definitions
#  like IntegrationTest.yaml, AcceptanceTest.yaml
wdEnvironmentConfigurations=""

#
# Absolute path to the Configuration File that contains information 
# to connect to Artifactory
#
# (Optional) Only necessary when wazideploy-generate is used to download the package
# wdDeployArtifactoryConfig=""
wdDeployArtifactoryConfig=""

## The below variables describe output and work files of the CBS

#
# Default name of the wazideploy **Deployment Plan** file
wdDeploymentPlanName="deploymentPlan.yaml"

#
# Default name of the wazideploy **Deployment Plan Report** file
wdDeploymentPlanReportName="deploymentPlanReport.html"

#
# Default name of the wazideploy **evidence file** file
wdEvidenceFileName="deploy/evidences/evidence.yaml"

#
# Default path of wazideploy evidence index folder
# wdIndexFolder=""
wdIndexFolder="index"

#
# wazideploy evidence query template that comes with the product to generate the evidence report
# https://www.ibm.com/docs/en/developer-for-zos/17.0.x?topic=analysis-predefined-queries-in-product
#
# default: wdQueryTemplate="wd-full-report-query"
wdQueryTemplate="wd-full-report-query"

#
# wazideploy evidence report renderer to generate the evidence report html file
# 
# default: wdReportRenderer="wd-full-report-renderer.html"
wdReportRenderer="wd-full-report-renderer.html"

#
# Default path of wazideploy evidence output file
# default: wdOutputFile="deploy/deployment-report.html"
wdOutputFile="deploy/deployment-report.html"

#
#
# Method to specify the work directory for Wazi Deploy
# Default folder name: deployPkgDir
# 
wdDeployPackageDir() {
    # default subfolder name
    deployPkgDir="deployPkgDir"
    if [[ ${Workspace:0:1} == "/" ]] ; then 
         echo "${Workspace}/${deployPkgDir}" # absolute workspace path
    else
        validateBuildRootDir
         echo "${buildRootDir}/${Workspace}/${deployPkgDir}";  # relative workspace path
    fi
   
}

#####################################################################################################
## End of wazideploy-generate.sh, wazideploy-deploy.sh and wazideploy-evidences.sh parameters    ####
#####################################################################################################

#####################################################################################################
## Central functions shared across scripts    #######################################################
#####################################################################################################
#
# Calculate the absolute path of the working directory
getWorkDirectory(){
    tmpWrkDir=""

    if [[ ${Workspace:0:1} == "/" ]] ; then 
        tmpWrkDir="${Workspace}"; # absolute workspace path
    else
        validateBuildRootDir
        tmpWrkDir="${buildRootDir}/${Workspace}"; # relative workspace path
    fi

    if [ "$nestedApplicationFolder" = "true" ]; then
     echo "${tmpWrkDir}/${App}"
    else
     echo "${tmpWrkDir}" # default
    fi
}
#
# Calculate the absolute path of the log directory
getLogDir() {
    if [[ ${Workspace:0:1} == "/" ]] ; then 
         echo "${Workspace}/${logsDir}" # absolute workspace path
    else
        validateBuildRootDir
         echo "${buildRootDir}/${Workspace}/${logsDir}";  # relative workspace path
    fi
   
}

#
# Calculate the absolute path of the application directory
getApplicationDir(){
    if [[ ${Workspace:0:1} == "/" ]] ; then 
        echo "${Workspace}/${App}";
    else
        validateBuildRootDir
        echo "${buildRootDir}/${Workspace}/${App}";
    fi
}

validateBuildRootDir(){
  if [ -z "${buildRootDir}" ]; then
    rc=4
    ERRMSG=$PGM": [WARNING] Build root directory is required. rc="$rc
    echo $ERRMSG
  else

    if [ ! -d "${buildRootDir}" ]; then
      rc=8
      ERRMSG=$PGM": [ERROR] Build root directory ${buildRootDir} was not found. rc="$rc
      echo $ERRMSG
    fi

  fi
}

#####################################################################################################
## End of Central functions shared across scripts    ################################################
#####################################################################################################
